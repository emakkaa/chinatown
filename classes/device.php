<?phpclass Device extends Model{	public $properties = array(			"id"=>null,			"name"=>"",			"lat"=>'49.279742',			"lng"=>'-123.103923',			"address"=>"",			"reply_timeout"=>"",			"onoff"=>1,			"power_on_level"=>254,			"options"=>96,			"min_level"=>2,			"max_level"=>254,			"fade_rate"=>3,			"fade_time"=>6,			"groups"=>0		);			function __construct()	{		parent::__construct();		$this->tableName = "devices";	}		function getID($address)	{		$id = 0;		$result = $this->SQL->query("SELECT id FROM devices WHERE address = '$address'");		while ($row = $result->fetch_object())		{			$id = $row->id;		}				return $id;	}		function getProperty($property)	{		$result = $this->select(			$property, "devices", "id = ".$this->properties['id']		);		$row = $result->fetch_row();				return $row[0];	}		function loadByAddress($address)	{		$this->load($this->getID($address));	}		function getAddress()	{		$address = false;		if (strlen($this->properties['address']) == 4)		{			$address = chr(hexdec(substr($this->properties['address'], 0, 2)));			$address .= chr(hexdec(substr($this->properties['address'], -2)));		}		return $address;	}		function sendSettings($address = "")	{		if (empty($address))		{			$address = $this->getAddress();		}		foreach ($this->properties as $key => $value)		{			if ($value != "")			{				switch($key)				{					case 'onoff':						if ($value)						{							$this->fastCommand(Commands::switchOn($address, $this->getProperty('power_on_level')));						}						else						{							$this->fastCommand(Commands::switchOff($address));						}						break;											case 'max_level':						$this->fastCommand(Commands::setMaxPowerLevel($address, $value));						break;											case 'min_level':						$this->fastCommand(Commands::setMinPowerLevel($address, $value));						break;											case 'power_on_level':						$this->fastCommand(Commands::setStartPowerLevel($address, $value));						break;											case 'fade_time':						$this->fastCommand(Commands::autoTime($address, $value));						break;				}			}		}	}		function sendFlashQuery()	{		$this->sendQuery(Commands::getFlashData($this->getAddress()));	}		/*function sendAnalogDataQuery()	{		$this->sendQuery(Commands::QueryAllAnalogData($this->getAddress()));	}*/		function syncGroups($old)	{		for ($i = 0; $i <= 31; $i++)		{			$value = (int)(1 << $i);			if (($old & $value) != ($this->properties['groups'] & $value))			{				if ($old & $value)				{					$this->fastCommand(Commands::removeFromGroup($this->getAddress(), $i));				}				else				{					$this->fastCommand(Commands::addToGroup($this->getAddress(), $i));				}			}		}	}		function syncOptions($old)	{		if ((0x80 & $old) != (0x80 & $this->properties['options']))		{			$this->fastCommand(Commands::autoDimming($this->getAddress(), (0x80 & $this->properties['options'])));		}				if ((0x40 & $old) != (0x40 & $this->properties['options']))		{			$this->fastCommand(Commands::autoColorChange($this->getAddress(), (0x40 & $this->properties['options'])));		}				if ((0x20 & $old) != (0x20 & $this->properties['options']))		{			$this->fastCommand(Commands::autoBlending($this->getAddress(), (0x20 & $this->properties['options'])));		}	}		function setColor($r, $g, $b, $p, $address = null)	{		if ($address == null)		{			$address = $this->getAddress();		}				$this->fastCommand(Commands::setRed($address, $r));		$this->fastCommand(Commands::setGreen($address, $g));		$this->fastCommand(Commands::setBlue($address, $b));				$this->fastCommand(Commands::setCurrentLevel($address, $p));		$this->fastQuery(Commands::getLevels($address));	}		function sendCommand($command, $when = 'NOW()')	{		$this->SQL->query('INSERT INTO `log`(message, send_after, user) VALUE("'.addslashes($command).'", '.$when.', '.$this->getUser().')');		}		function fastCommand($command)	{		$this->SQL->query('INSERT INTO `log`(message, send_after, user) VALUE("'.addslashes($command).'", ADDDATE(NOW(), INTERVAL -1 HOUR), '.$this->getUser().')');	}		function sendQuery($query, $when = 'NOW()')	{		$this->SQL->query('INSERT INTO `log`(i_o, message, send_after, user) VALUE(1, "'.addslashes($query).'", '.$when.', '.$this->getUser().')');	}		function fastQuery($query)	{		$this->SQL->query('INSERT INTO `log`(i_o, message, send_after, user) VALUE(1, "'.addslashes($query).'", ADDDATE(NOW(), INTERVAL -1 HOUR), '.$this->getUser().')');	}		function setWorktime($address, $worktime)	{		$this->SQL->query("UPDATE devices SET worktime = $worktime WHERE id = ".$this->getID($address));	}		function seen($address)	{		$this->SQL->query("UPDATE devices SET last_seen = CURRENT_TIMESTAMP, active = 1 WHERE address = '$address'");	}		function getUser()	{		return isset($_SESSION['user']) ? $_SESSION['user'] : 0;	}}?>